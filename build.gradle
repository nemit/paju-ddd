buildscript {
    apply from: "gradle/dependencies.gradle"
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    configurations.create("ktlint")
    dependencies {
        classpath pluginLibs.kotlinGradlePlugin
        classpath pluginLibs.ktlintPlugin
        ktlint pluginLibs.ktlint
        classpath pluginLibs.junitGradlePlugin
    }
}

apply from: "gradle/ktlint.gradle"
apply plugin: "org.jlleitschuh.gradle.ktlint"

ktlint {
    verbose = true
    reporter = "checkstyle"
    ignoreFailures = true
}

allprojects {
    group 'nemit.fi'
    version '1.0-SNAPSHOT'

    apply plugin: 'org.junit.platform.gradle.plugin'
    apply from: "$rootDir/gradle/integrationtests.gradle"

    junitPlatform {
        filters {
            tags {
                if(gradle.startParameter.taskRequests.flatten().find({ it.args.find {it == "integrationTests"}}) != null) {
                    exclude '*'
                    include 'integration'
                } else {
                    exclude 'integration'
                }
            }
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        testRuntime libs.junitJupiterEngine
    }
}

subprojects {

    apply plugin: 'kotlin'


    task allDeps(type: DependencyReportTask) {}

    repositories {
         maven {url "https://jcenter.bintray.com"}
    }

    dependencies {
        compile libs.kotlinStdLib
        compile libs.kotlinStdLib2
        compile libs.kotlinReflect
        compile 'io.github.microutils:kotlin-logging:1.4.6'
        testCompile libs.junitJupiterApi
        testCompile libs.mockitoKotlin
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    configurations
            .matching{ it.name != 'ktlint' }
            .all {
                resolutionStrategy {
                failOnVersionConflict()
                preferProjectModules()

                libs.each { k, v -> force(v) }
                force "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlin"
                force "org.jetbrains.kotlin:kotlin-reflect:$versions.kotlin"
            }
    }
}

